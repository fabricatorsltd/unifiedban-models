// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Unifiedban.Next.Models;

#nullable disable

namespace Unifiedban.Next.Models.Migrations
{
    [DbContext(typeof(UBContext))]
    [Migration("20220319163755_ubnext-RenameTGConfigColumn")]
    partial class ubnextRenameTGConfigColumn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Unifiedban.Next.Models.ConfigurationParameter", b =>
                {
                    b.Property<string>("ConfigurationParameterId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AcceptedValues")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Override")
                        .HasColumnType("tinyint");

                    b.Property<string>("Platforms")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ConfigurationParameterId");

                    b.ToTable("ConfigurationParameter", "dbo");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Discord.DGuild", b =>
                {
                    b.Property<string>("ChatId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("CommandPrefix")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisabledCommands")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("EnabledCommandsType")
                        .HasColumnType("tinyint");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("ReportChanneltId")
                        .HasColumnType("bigint");

                    b.Property<string>("RulesText")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("SettingsLanguage")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UBUserId")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("WelcomeText")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("ChatId");

                    b.HasIndex("UBUserId");

                    b.ToTable("DGuild", "discord");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Discord.DGuildMember", b =>
                {
                    b.Property<string>("ChatId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("UBUserId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte>("StaffType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("UserLevel")
                        .HasColumnType("tinyint");

                    b.HasKey("ChatId", "UBUserId");

                    b.HasIndex("UBUserId");

                    b.ToTable("DGuildMember", "discord");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Discord.DUser", b =>
                {
                    b.Property<string>("UBUserId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte>("TrustFactor")
                        .HasColumnType("tinyint");

                    b.HasKey("UBUserId");

                    b.ToTable("DUser", "discord");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Filters.BadWord", b =>
                {
                    b.Property<string>("BadWordId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ChatId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Match")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Regex")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("BadWordId");

                    b.HasIndex("ChatId");

                    b.ToTable("BadWord", "filter");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Filters.SafeTName", b =>
                {
                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("TelegramChatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Username", "TelegramChatId");

                    b.ToTable("SafeTName", "filter");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Log.Action", b =>
                {
                    b.Property<string>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ActionTypeId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("InstanceId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("TakenByUBUserId")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("TakenByUserId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("UtcDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ActionId");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("ChatId");

                    b.HasIndex("InstanceId");

                    b.HasIndex("TakenByUBUserId");

                    b.ToTable("Action", "log");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Log.ActionType", b =>
                {
                    b.Property<string>("ActionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ActionTypeId");

                    b.ToTable("ActionType", "log");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Log.Instance", b =>
                {
                    b.Property<string>("InstanceId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ModuleId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("Stop")
                        .HasColumnType("datetime2");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("InstanceId");

                    b.ToTable("Instance", "log");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Log.Operation", b =>
                {
                    b.Property<string>("OperationId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ActionTypeId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("InstanceId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UBUserId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("UtcDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OperationId");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("InstanceId");

                    b.HasIndex("UBUserId");

                    b.ToTable("Operation", "log");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Log.Stats", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("Date", "Category");

                    b.ToTable("Stats", "log");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Log.SupportSession", b =>
                {
                    b.Property<string>("SupportSessionId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("InstanceId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("SupportSessionId");

                    b.HasIndex("ChatId");

                    b.HasIndex("InstanceId");

                    b.ToTable("SupportSession", "log");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Log.SupportSessionLog", b =>
                {
                    b.Property<string>("SupportSessionId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("UBUserId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasIndex("SupportSessionId");

                    b.HasIndex("UBUserId");

                    b.ToTable("SupportSessionLog", "log");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Log.SystemLog", b =>
                {
                    b.Property<string>("SystemLogId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Function")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InstanceId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint");

                    b.Property<string>("LoggerName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("SystemLogId");

                    b.HasIndex("InstanceId");

                    b.ToTable("System", "log");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Log.TrustFactor", b =>
                {
                    b.Property<string>("TrustFactorLogId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte>("Action")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstanceId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("RelatedActionId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("UBUserId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("TrustFactorLogId");

                    b.HasIndex("InstanceId");

                    b.HasIndex("RelatedActionId");

                    b.HasIndex("UBUserId");

                    b.ToTable("TrustFactor", "log");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Module", b =>
                {
                    b.Property<string>("ModuleId")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("ChainPriority")
                        .HasColumnType("int");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte>("MessageCategory")
                        .HasColumnType("tinyint");

                    b.Property<string>("Platforms")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("QueueName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RoutingKey")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ModuleId");

                    b.ToTable("Module", "dbo");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Security.Privilege", b =>
                {
                    b.Property<string>("PrivilegeId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("TranslationKeyId")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("PrivilegeId");

                    b.HasIndex("TranslationKeyId");

                    b.ToTable("Privilege", "security");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Security.Session", b =>
                {
                    b.Property<string>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("LastIP")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UBUserId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("SessionId");

                    b.HasIndex("UBUserId");

                    b.ToTable("Session", "security");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Security.UBUserPrivilege", b =>
                {
                    b.Property<string>("UBUserId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ChatId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("PrivilegeId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("UBUserId", "ChatId", "PrivilegeId");

                    b.HasIndex("ChatId");

                    b.HasIndex("PrivilegeId");

                    b.ToTable("UBUserPrivilege", "security");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Security.Warn", b =>
                {
                    b.Property<string>("UBUserId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Platform")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PlatformChatId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ActionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("AssignedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Expiry")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("UBUserId", "Platform", "PlatformChatId");

                    b.HasIndex("ActionId");

                    b.ToTable("Warn", "security");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Telegram.TGChat", b =>
                {
                    b.Property<string>("ChatId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("CommandPrefix")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("ConfigurationJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisabledCommands")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("EnabledCommandsType")
                        .HasColumnType("tinyint");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("ReportChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("RulesText")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("SettingsLanguage")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<long>("TelegramChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UBUserId")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("WelcomeText")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("ChatId");

                    b.HasIndex("UBUserId");

                    b.ToTable("TGChat", "telegram");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Telegram.TGChatMember", b =>
                {
                    b.Property<string>("ChatId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("UBUserId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte>("StaffType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("UserLevel")
                        .HasColumnType("tinyint");

                    b.HasKey("ChatId", "UBUserId");

                    b.HasIndex("UBUserId");

                    b.ToTable("TGChatMember", "telegram");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Telegram.TGStats", b =>
                {
                    b.Property<string>("ChatId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("ChatId", "Date", "Category");

                    b.ToTable("TGStats", "telegram");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Telegram.TGUser", b =>
                {
                    b.Property<string>("UBUserId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("TrustFactor")
                        .HasColumnType("int");

                    b.HasKey("UBUserId");

                    b.ToTable("TGUser", "telegram");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Translation.Entry", b =>
                {
                    b.Property<string>("LanguageId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("KeyId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId", "KeyId");

                    b.HasIndex("KeyId");

                    b.ToTable("Entry", "lang");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Translation.EntryCustom", b =>
                {
                    b.Property<string>("LanguageId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("KeyId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ChatId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId", "KeyId", "ChatId");

                    b.HasIndex("ChatId");

                    b.HasIndex("KeyId");

                    b.ToTable("EntryCustom", "lang");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Translation.Key", b =>
                {
                    b.Property<string>("KeyId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("KeyId");

                    b.ToTable("Key", "lang");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Translation.Language", b =>
                {
                    b.Property<string>("LanguageId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("UniversalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("LanguageId");

                    b.ToTable("Language", "lang");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Twitch.TBroadcaster", b =>
                {
                    b.Property<string>("ChatId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("BroadcasterId")
                        .HasColumnType("bigint");

                    b.Property<string>("CommandPrefix")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisabledCommands")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("EnabledCommandsType")
                        .HasColumnType("tinyint");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("RulesText")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("SettingsLanguage")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UBUserId")
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("ChatId");

                    b.HasIndex("UBUserId");

                    b.ToTable("TBroadcaster", "twitch");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Twitch.TBroadcasterStaff", b =>
                {
                    b.Property<string>("ChatId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("UBUserId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte>("StaffType")
                        .HasColumnType("tinyint");

                    b.HasKey("ChatId", "UBUserId");

                    b.HasIndex("UBUserId");

                    b.ToTable("TBroadcasterStaff", "twitch");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Twitch.TUser", b =>
                {
                    b.Property<string>("UBUserId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte>("TgUserLevel")
                        .HasColumnType("tinyint");

                    b.Property<byte>("TrustFactor")
                        .HasColumnType("tinyint");

                    b.HasKey("UBUserId");

                    b.ToTable("TUser", "twitch");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.UBChat", b =>
                {
                    b.Property<string>("UBChatId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("UBChatId");

                    b.ToTable("UBChat", "dbo");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.UBChatConfiguration", b =>
                {
                    b.Property<string>("ChatId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ConfigurationParameterId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Platforms")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("AcceptedValues")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Override")
                        .HasColumnType("tinyint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ChatId", "ConfigurationParameterId", "Platforms");

                    b.ToTable("UBChatConfiguration", "dbo");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.UBCommand", b =>
                {
                    b.Property<string>("Command")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Platform")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte>("AnswerType")
                        .HasColumnType("tinyint");

                    b.Property<int>("DiscordUserLevel")
                        .HasColumnType("int");

                    b.Property<byte>("TgUserLevel")
                        .HasColumnType("tinyint");

                    b.Property<string>("TwitchUserLevel")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Command", "Platform");

                    b.ToTable("UBCommand", "dbo");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.UBCustomCommand", b =>
                {
                    b.Property<string>("UBCustomCommandId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte>("AnswerType")
                        .HasColumnType("tinyint");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DiscordRoles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Platforms")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("TelegramMediaId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("TgUserLevel")
                        .HasColumnType("tinyint");

                    b.Property<string>("TwitchUserLevel")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("UBCustomCommandId");

                    b.HasIndex("ChatId");

                    b.ToTable("UBCustomCommand", "dbo");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.UBStaff", b =>
                {
                    b.Property<string>("UBUserId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Platform")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint");

                    b.HasKey("UBUserId", "Platform");

                    b.ToTable("UBStaff", "dbo");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.UBUser", b =>
                {
                    b.Property<string>("UBUserId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long?>("DiscordId")
                        .HasColumnType("bigint");

                    b.Property<string>("FabUserId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint");

                    b.Property<long?>("TelegramId")
                        .HasColumnType("bigint");

                    b.Property<byte>("TrustFactor")
                        .HasColumnType("tinyint");

                    b.Property<long?>("TwitchId")
                        .HasColumnType("bigint");

                    b.HasKey("UBUserId");

                    b.ToTable("UBUser", "dbo");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Discord.DGuild", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.UBChat", "Chat")
                        .WithOne("DGuild")
                        .HasForeignKey("Unifiedban.Next.Models.Discord.DGuild", "ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unifiedban.Next.Models.UBUser", "UBUser")
                        .WithMany()
                        .HasForeignKey("UBUserId");

                    b.Navigation("Chat");

                    b.Navigation("UBUser");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Discord.DGuildMember", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.UBChat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unifiedban.Next.Models.UBUser", "UBUser")
                        .WithMany()
                        .HasForeignKey("UBUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("UBUser");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Discord.DUser", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.UBUser", "UBUser")
                        .WithMany()
                        .HasForeignKey("UBUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UBUser");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Filters.BadWord", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.UBChat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Log.Action", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.Log.ActionType", "ActionType")
                        .WithMany()
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unifiedban.Next.Models.UBChat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unifiedban.Next.Models.Log.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unifiedban.Next.Models.UBUser", "TakenBy")
                        .WithMany()
                        .HasForeignKey("TakenByUBUserId");

                    b.Navigation("ActionType");

                    b.Navigation("Chat");

                    b.Navigation("Instance");

                    b.Navigation("TakenBy");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Log.Operation", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.Log.ActionType", "ActionType")
                        .WithMany()
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unifiedban.Next.Models.Log.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unifiedban.Next.Models.UBUser", "UBUser")
                        .WithMany()
                        .HasForeignKey("UBUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionType");

                    b.Navigation("Instance");

                    b.Navigation("UBUser");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Log.SupportSession", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.UBChat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unifiedban.Next.Models.Log.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Instance");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Log.SupportSessionLog", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.Log.SupportSession", "SupportSession")
                        .WithMany()
                        .HasForeignKey("SupportSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unifiedban.Next.Models.UBUser", "UBUser")
                        .WithMany()
                        .HasForeignKey("UBUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupportSession");

                    b.Navigation("UBUser");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Log.SystemLog", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.Log.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instance");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Log.TrustFactor", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.Log.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Unifiedban.Next.Models.Log.Action", "RelatedAction")
                        .WithMany()
                        .HasForeignKey("RelatedActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unifiedban.Next.Models.UBUser", "UBUser")
                        .WithMany()
                        .HasForeignKey("UBUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instance");

                    b.Navigation("RelatedAction");

                    b.Navigation("UBUser");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Security.Privilege", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.Translation.Key", "TranslationKey")
                        .WithMany()
                        .HasForeignKey("TranslationKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TranslationKey");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Security.Session", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.UBUser", "UBUser")
                        .WithMany()
                        .HasForeignKey("UBUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UBUser");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Security.UBUserPrivilege", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.UBChat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unifiedban.Next.Models.Security.Privilege", "Privilege")
                        .WithMany()
                        .HasForeignKey("PrivilegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unifiedban.Next.Models.UBUser", "UBUser")
                        .WithMany()
                        .HasForeignKey("UBUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Privilege");

                    b.Navigation("UBUser");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Security.Warn", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.Log.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unifiedban.Next.Models.UBUser", "UBUser")
                        .WithMany()
                        .HasForeignKey("UBUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("UBUser");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Telegram.TGChat", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.UBChat", "Chat")
                        .WithOne("TGChat")
                        .HasForeignKey("Unifiedban.Next.Models.Telegram.TGChat", "ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unifiedban.Next.Models.UBUser", "UBUser")
                        .WithMany()
                        .HasForeignKey("UBUserId");

                    b.Navigation("Chat");

                    b.Navigation("UBUser");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Telegram.TGChatMember", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.UBChat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unifiedban.Next.Models.UBUser", "UBUser")
                        .WithMany()
                        .HasForeignKey("UBUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("UBUser");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Telegram.TGStats", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.UBChat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Telegram.TGUser", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.UBUser", "UBUser")
                        .WithMany()
                        .HasForeignKey("UBUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UBUser");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Translation.Entry", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.Translation.Key", "Key")
                        .WithMany()
                        .HasForeignKey("KeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unifiedban.Next.Models.Translation.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Key");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Translation.EntryCustom", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.UBChat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unifiedban.Next.Models.Translation.Key", "Key")
                        .WithMany()
                        .HasForeignKey("KeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unifiedban.Next.Models.Translation.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Key");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Twitch.TBroadcaster", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.UBChat", "Chat")
                        .WithOne("TBroadcaster")
                        .HasForeignKey("Unifiedban.Next.Models.Twitch.TBroadcaster", "ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unifiedban.Next.Models.UBUser", "UBUser")
                        .WithMany()
                        .HasForeignKey("UBUserId");

                    b.Navigation("Chat");

                    b.Navigation("UBUser");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Twitch.TBroadcasterStaff", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.UBChat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unifiedban.Next.Models.UBUser", "UBUser")
                        .WithMany()
                        .HasForeignKey("UBUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("UBUser");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.Twitch.TUser", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.UBUser", "UBUser")
                        .WithMany()
                        .HasForeignKey("UBUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UBUser");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.UBChatConfiguration", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.UBChat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.UBCustomCommand", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.UBChat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.UBStaff", b =>
                {
                    b.HasOne("Unifiedban.Next.Models.UBUser", "UBUser")
                        .WithMany()
                        .HasForeignKey("UBUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UBUser");
                });

            modelBuilder.Entity("Unifiedban.Next.Models.UBChat", b =>
                {
                    b.Navigation("DGuild")
                        .IsRequired();

                    b.Navigation("TBroadcaster")
                        .IsRequired();

                    b.Navigation("TGChat")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
